// Out given Grammar from IML Slides with the following changes:
// remove repetitions, options, grouping
// remove left recursion
// remove same leftmost symbol


// Program
program ::= PROGRAM IDENT progParamList program1 DO cpsCmd ENDPROGRAM
program1 ::= GLOBAL cpsDecl
program1 ::= e

// Declarations
decl ::= stoDecl
decl ::= funDecl
decl ::= procDecl
stoDecl ::= CHANGEMODE typedIdent
stoDecl ::= typedIdent
funDecl ::= FUN IDENT paramList RETURNS stoDecl globalGlobImps localCpsStoDecl DO cpsCmd ENDFUN
globalGlobImps ::= GLOBAL globImps
globalGlobImps ::= e
localCpsStoDecl ::= LOCAL cpsStoDecl
localCpsStoDecl ::= e
procDecl ::= PROC IDENT paramList globalGlobImps localCpsStoDecl DO cpsCmd ENDPROC
globImps ::= globImp globImps1
globImps1 ::= COMMA globImp globImps1
globImps1 ::= e
globImp ::= optFlowmode optChangemode IDENT
optFlowmode ::= FLOWMODE
optFlowmode ::= e
optChangemode ::= CHANGEMODE
optChangemode ::= e
optMechmode ::= MECHMODE
optMechmode ::= e
cpsDecl ::= decl cpsDecl1
cpsDecl1 ::= SEMICOLON cpsDecl
cpsDecl1 ::= e
cpsStoDecl ::= stoDecl cpsStoDecl1
cpsStoDecl1 ::= SEMICOLON cpsStoDecl
cpsStoDecl1 ::= e

// Parameter Lists
progParamList ::= LPAREN optProgParams RPAREN
optProgParams ::= optProgParams1
optProgParams ::= e
optProgParams1 ::= progParam optProgParams2
optProgParams2 ::= COMMA optProgParams
optProgParams2 ::= e
progParam ::= optFlowmode optChangemode typedIdent
paramList ::= LPAREN paramList1 RPAREN
paramList1 ::= param paramList2
paramList1 ::= e
paramList2 ::= COMMA paramList1
paramList2 ::= e
param ::= optFlowmode optMechmode optChangemode typedIdent
typedIdent ::= IDENT COLON ATOMTYPE

// Commands
cmd ::= SKIP
cmd ::= expr BECOMES expr
cmd ::= IF expr THEN cpsCmd ELSE cpsCmd ENDIF
cmd ::= WHILE expr DO cpsCmd ENDWHILE
cmd ::= CALL IDENT exprList optGlobInits
optGlobInits ::= globInits
optGlobInits ::= e
cmd ::= DEBUGIN expr
cmd ::= DEBUGOUT expr
cpsCmd ::= cmd cpsCmd1
cpsCmd1 ::= SEMICOLON cpsCmd
cpsCmd1 ::= e
globInits ::= INIT idents
idents ::= IDENT idents1
idents1 ::= COMMA idents
idents1 ::= e

// Expressions
expr ::= term1 expr1
expr1 ::= BOOLOPR term1 expr1
expr1 ::= e
term1 ::= term2 term11
term11 ::= RELOPR term2
term11 ::= e
term2 ::= term3 term21
term21 ::= ADDOPR term3 term21
term21 ::= e
term3 ::= factor term31
term31 ::= MULTOPR factor term31
term31 ::= e
factor ::= LITERAL
factor ::= IDENT ident1
factor ::= monadicOpr factor
factor ::= LPAREN expr RPAREN
ident1 ::= INIT
ident1 ::= exprList
ident1 ::= e
monadicOpr ::= NOT
monadicOpr ::= ADDOPR
exprList ::= LPAREN exprList1 RPAREN
exprList1 ::= expr exprList2
exprList1 ::= e
exprList2 ::= COMMA exprList1
exprList2 ::= e